<?php

/**
 * @file
 * Contains class MyNameIsBartPayPalIPNListener.
 */

/**
 * Tests the IPN callback functionality.
 */
class MyNameIsBartPayPalIPNListener extends MyNameIsBartPayPalIPNWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'IPN listener',
      'group' => 'PayPal IPN',
    );
  }

  function setUp(array $modules = array()) {
    $this->profile = 'testing';
    parent::setUp($modules + array('mynameisbart_paypal_ipn_test'));
  }

  /**
   * Tests the IPN listener.
   */
  function testIPNListener() {
    $payment_method = $this->paymentMethodCreate(2, payment_method_controller_load('MyNameIsBartPayPalIPNTestPaymentMethodController'));
    entity_save('payment_method', $payment_method);
    $payment = $this->paymentCreate(2, $payment_method);
    entity_save('payment', $payment);
    $original_payment_status = $payment->getStatus()->status;

    // Mock an IPN.
    $ipn_variables = $this->mockIPNVariables($payment->pid);
    $url = MyNameIsBartPayPalIPNController::URL();
    $this->curlExec(array(
      CURLOPT_POST => TRUE,
      CURLOPT_POSTFIELDS => $ipn_variables,
      CURLOPT_URL => $url,
    ));
    $response = $this->drupalGetContent();
    $this->assertFalse($response);
    $this->verbose($response);
    $this->assertResponse(200);

    // Test that an IPN has been saved.
    $this->assertTrue(MyNameIsBartPayPalIPNController::load($ipn_variables['txn_id']));
    $payment = entity_load_single('payment', $payment->pid);
    $this->assertNotEqual($original_payment_status, $payment->getStatus()->status);
  }
}